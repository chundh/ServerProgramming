<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
						http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
						http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">
	

	<!-- component 스캔 설정 -->
	<context:component-scan base-package="com.rubypaper.biz"></context:component-scan>
	
	<!-- 횡단 관심에 해당하는 공통 클래스를 bean 등록한다. -->
	<!-- <bean id="Log" class="com.rubypaper.biz.common.LogAdvice"/>
	<bean id="afterReturning" class="com.rubypaper.biz.common.AfterReturningAdvice"></bean>
	<bean id="afterThrowing" class="com.rubypaper.biz.common.AfterThrowingAdvice"></bean> -->
	
	<!-- AOP 설정 
	     *은 모든 문자가 들어올 수 있도록 하는 키워드이다.
	     execution은 명시자라고 부른다. execution안의 파라미터 값을 pointCut expression(포인트컷 표현식)이라고 부른다.
	           해당 표현식에 따라 호출되는 것이 달라진다.-->
	
	<!-- expression 
	   	 return type : *, void, int, Object, com.rubypaper.biz 등등이 올 수 있다. *은 모든 타입을 수용
	   	 pakage dir : com.rubypaper.biz..은 ~biz로 끝나는 모든 패키지
	   	 			  com.rubypaper.biz.user 정확히 ~user에 포함되는 패키지
	   	 			  com.rubypaper..user은 rubypaper로 시작해서 user로 끝나는 패키지
	   	 class name : *Impl 은 Impl로 이름이 끝나는 모든 클래스
	   	 			  UserServiceImpl 은 UserServiceImpl이름의 클래스 
	   	 			    클래스 이름은 대소문자를 구분한다.
	   	 method : *은 모든 메소드
	   	 		  get*은 get으로 시작하는 모든 메소드
	   	 parameter : (int,double)은 int, double을 파라미터로한다.
	   	 			 (..) 매개변수에 상관없이 메소드를 호출한다.-->

	<!-- <aop:config>
		<aop:pointcut id="allPointcut" expression="execution(* com.rubypaper.biz..*Impl.*(..))"/>
		<aop:pointcut id="getPointcut" expression="execution(* com.rubypaper.biz..*Impl.get*(..))"/>
		
		<aop:aspect ref="Log">
			<aop:before pointcut-ref="allPointcut" method="printLog"/>
		</aop:aspect>
		
		<aop:aspect ref="afterReturning">
			<aop:after pointcut-ref="getPointcut" method="afterLog" />
			<aop:after-returning pointcut-ref="getPointcut" method="afterLog" returning="returnObj"/>
		</aop:aspect>
		
		<aop:aspect ref="afterThrowing">
			<aop:after-throwing pointcut-ref="allPointcut" method="exceptionLog"/>
		</aop:aspect>
		
		모든 비즈니스 메소드가 실행이 될 떄 aroundLog 메소드를 동작시킨다.
		<aop:aspect ref="around">
			<aop:around pointcut-ref="allPointcut" method="aroundLog"/>
		</aop:aspect>
	</aop:config> -->

	<!-- Advice
		  실행 시점에 따라 5가지로 나뉜다.
		 aop:before : 비즈니스 로직 전에 호출  
		 aop:after : 비즈니스 로직 후에 호출. 속성으로 returning을 쓸 수 없다. return값으로 로직을 수행하고 싶으면 after-returning을 사용해야한다.
		 aop:after-returning : 비즈니스 로직을 처리한 후의 return값을 returning="exam"의 exam파라미터에 넣고 method를 실행한다. -->
	
	<!-- Aspect 
		 pointcut과 advise의 결합으로 이루어져있다.
		  실질적으로 횡단관심과 종단관심을 이어준다.
		 pointcut에 해당하는 메소드가 실행되기 전/후에 aop:aspect ref 가 갖고 있는 method를 호출한다.-->
		 
	<!-- Annotation 기반의 AOP 설정 -->
	<aop:aspectj-autoproxy/>
		
	<bean class="com.rubypaper.biz.board.BoardDAOSpring"/>
	
	<!-- DataSource 설정 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
	      <property name="driverClassName" value="org.h2.Driver"/>
	      <property name="url"			   value="jdbc:h2:tcp://localhost/~/test"/>
	      <property name="username"		   value="sa"/>
	      <property name="password"		   value=""/>
	      
	</bean>
	<!-- Spring JDBC 설정 -->
	<bean id="spring" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource"/>
	</bean>
</beans>

